// ONLY SPECS

field val : Int
field next : Ref

predicate List(l : Ref) {
   (l != null) ==> acc(l.val) && acc(l.next) && List(l.next)
}


function values(l: Ref): Seq[Int]
    requires List(l)
{
    unfolding List(l) in
    l == null
        ? Seq()
        : Seq(l.val) ++ values(l.next)
}

method add_iterative_spec(l : Ref)
   requires List(l)
   ensures List(l)
   ensures |values(l)| == |old(values(l))|
   ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
   var curr : Ref
   curr := l

   while(curr.next != null)
      requires List(curr)
      ensures List(curr)
   {
      unfold List(curr)
      curr.val := curr.val + 1
      curr := curr.next
   }


}

// sbt "run --plugin=silver/src/main/scala/plugin/standard/loopspecs/LoopSpecsPlugin.scala src/test/Viper/Syntax/syntax1.vpr --disableCatchingExceptions"