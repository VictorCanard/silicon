field val : Int
field next : Ref

predicate List(l : Ref) {
   (l != null) ==> acc(l.val) && acc(l.next) && List(l.next)
}


function values(l: Ref): Seq[Int]
    requires List(l)
{
    unfolding List(l) in 
    l == null
        ? Seq()
        : Seq(l.val) ++ values(l.next)
}

method add_recursive(l : Ref)
  requires List(l)
  ensures List(l) 
  ensures |values(l)| == |old(values(l))| 
  ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
  unfold List(l)
  if(l != null){
    l.val := l.val + 1
    // Prove Pre(l.next)
    add_recursive(l.next)
    // Assume Post(l.next)
  }
  fold List(l)
}

/* method add_recursive(l : Ref)
  requires precondition
  ensures postcondition
   {
  if(l != null){
    Body
    Recursive Call
  }else{
    Base Case Code
  }
  Ghost Code
} */



predicate lseg(l : Ref, last : Ref) { // from l to end (excl.)
   l != last ==> acc(l.next) && acc(l.val) && lseg(l.next, last)
}



predicate ListSeg(l : Ref, end : Ref) { // from l to end (excl.)
   l != end ==> acc(l.next) && acc(l.val) && ListSeg(l.next, end)
}

function vals(l: Ref, end : Ref): Seq[Int]
    requires ListSeg(l, end)
{
    unfolding ListSeg(l, end) in l == end
        ? Seq()
        : Seq(l.val) ++ vals(l.next, end)
}




function length(l : Ref): Int
    requires List(l)
    {
        unfolding List(l)
        in l == null ? 0 : 1 + length(l.next)
    }


method len_recursive_(l : Ref, accu : Int) returns (len : Int)
  requires List(l)
  ensures List(l) 
  //ensures |values(l)| == |old(values(l))| 
  ensures accu + old(length(l)) == len 
   {
  unfold List(l)
  if(l != null){
    // Prove Pre(l.next)
   
    len := len_recursive_(l.next, accu + 1)

    // Assume Post(l.next) 
  }else{
    len := accu
  }
  fold List(l)
}


method(){
   while(curr_copy != null){
        
        curr_copy := curr_copy.next
        accu_copy := accu_copy + 1
   }
   len := accu
}

//loop_spec
      //pre: List(curr)
      //post: List(pre(curr)) 
     // && accu + pre(length(pre(curr))) == len 

// pre() -> old()
// pre(var) -> args
// var -> args_ret

method len_recursive_iterative_spec(len : Int, curr : Ref, accu : Int) returns (len_ret : Int, curr_ret : Ref, accu_ret : Int) //Todo change to curr_ret
    requires List(curr)
    ensures List(curr)
    ensures accu_ret + old(length(curr)) == len_ret
{

    label pre_loop
    var curr_ret : Ref := curr
    var accu_ret : Int := accu


    unfold List(curr)
    
    if(curr_copy != null){
        
        curr_ret := curr_ret.next
        accu_ret := accu_copy + 1

        len, curr_ret, accu_ret := len_recursive_iterative_spec(...)
    }else{
        len := accu
    }
    fold List(curr)



    //assert false
}

// This should be desugared into:
method len_iterative_spec(l : Ref) returns (len : Int)
   requires List(l)
   ensures List(l)
   ensures old(length(l)) == len 
   {
      var curr : Ref := l
      var accu : Int := 0


   // Precondition of while loop = pre of method. So if it verifies then this method call too.

     len, curr, accu := len_recursive_iterative_spec(curr, accu) // give all loop targets to method

    // We get post of method and this should prove post of caller. The caller can use curr == l, as it didn't exhale this it only exhaled
    // List(curr)

      

      
   }


/* while(l != null){
   inhale Pre(l)

   Body

   exhale Pre(l) // This now refers to l.next

   inhale Post(l)

   Ghost Code // This helps to prove the postcondition below

   exhale Post(old(curr)) // This refers to curr and not curr.next 
} 

while(l != null){
   inhale Pre(l)

   Body

   exhale Pre(l) // This now refers to l.next

   inhale Post(l)

   Ghost Code // This helps to prove the postcondition below

   exhale Post(old(curr)) // This refers to curr and not curr.next 
} 
Base Case Code

Ghost Code

exhale Post(l)



inhale Pre(l)
while(l != null){
   Body

   Ghost Code 

} 
Base Case Code

Ghost Code

exhale Post(l) */


//invariant unfolding List(curr) in |values(l)| == |old(values(l))| // The length remains unchanged
      //invariant forall i: Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l))[i] + 1
      //

/* method length(l : Ref) returns (ret : Int)
   requires List(l)
   ensures List(l)
 {
   if (l == null) {
      ret := 0
   } else {
      unfold List(l)
      ret := length(l.next)
      ret := ret + 1
      fold List(l)
   }
} */




/* method length_iterative(l : Ref) returns (ret : Int)
   requires List(l)
   ensures List(l)
 {
   var newl : Ref
   ret := 0
   newl := l
   while (newl != null)
     invariant List(newl)
     invariant ListSeg(l, newl)
     //requires List(newl)
     //ensures List(l)
   {
      unfold List(newl)
      ret := ret + 1
      newl := newl.next
      //fold List(newl)
   }
}  */

// x -> y -> z
//      ^ 
//      newl
// ^ 
// l