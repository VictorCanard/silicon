field val : Int
field next : Ref

predicate List(l : Ref) {
   (l != null) ==> acc(l.val) && acc(l.next) && List(l.next)
}


function values(l: Ref): Seq[Int]
    requires List(l)
{
    unfolding List(l) in 
    l == null
        ? Seq()
        : Seq(l.val) ++ values(l.next)
}

method add_recursive(l : Ref)
  requires List(l) // List(null)
  ensures List(l) // List(null)
  ensures |values(l)| == |old(values(l))|  // |values(null)| == |old(values(null))| this old refers to pre(.) basically
  ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
      //curr from here
  unfold List(l)
  if(l != null){
    l.val := l.val + 1
    // Prove Pre(l.next)
    add_recursive(l.next)


    // Assume Post(l.next)

  }else{
    //l:= l.next
  }

  fold List(l)
}

/* method add_recursive(l : Ref)
  requires precondition
  ensures postcondition
   {
  if(l != null){
    Body
    Recursive Call
  }else{
    Base Case Code
  }
  Ghost Code
} */



predicate lseg(l : Ref, last : Ref) { // from l to end (excl.)
   l != last ==> acc(l.next) && acc(l.val) && lseg(l.next, last)
}



/* method length(this: Ref) returns (res: Int)
   requires this != null && lseg(this, null)
   ensures lseg(this, null)
   {
      res := 0
      var curr: Ref := this
      unfold lseg(this, null)
      fold lseg(this, curr)  // empty segment to establish loop invariant
      while(curr.next != null)
      invariant acc(curr.next) && acc(curr.val) && lseg(curr.next, null) && lseg(this, curr)
      {
         res := res + 1
         var tmp: Ref; tmp := curr.next // read here, before permission is folded
         addAtEnd(this, curr, curr.next) // extend predicate
         curr := tmp
         unfold lseg(curr, null)
      }
      addAtEnd(this, curr, null)
         
   } */

predicate ListSeg(l : Ref, end : Ref) { // from l to end (excl.)
   l != end ==> acc(l.next) && acc(l.val) && ListSeg(l.next, end)
}

function vals(l: Ref, end : Ref): Seq[Int]
    requires ListSeg(l, end)
{
    unfolding ListSeg(l, end) in l == end
        ? Seq()
        : Seq(l.val) ++ vals(l.next, end)
}

/* method addAtEnd(this: Ref, n: Ref, nn: Ref)
   requires ListSeg(this, n) &&  acc(ListSeg(nn, null), 1/2) && n != nn
   requires acc(n.next) && acc(n.val) && n.next == nn
   ensures ListSeg(this, nn) && acc(ListSeg(nn, null), 1/2)
   ensures vals(this, nn) ==  old(vals(this, n)) ++  Seq(old(n.val))
   {
      if(this == n) {
         fold ListSeg(nn, nn)  // empty segment
         fold ListSeg(this, nn)
      } else {
         unfold ListSeg(this, n)
         assert(unfolding acc(ListSeg(nn, null), 1/2) in nn != this)
         addAtEnd(this.next, n, nn)
         fold ListSeg(this, nn)
      }
   }

method add_iterative(l : Ref)
   requires l!= null && ListSeg(l, null)
   ensures ListSeg(l, null)
   ensures |vals(l, null)| == |old(vals(l, null))| 
   ensures forall i : Int :: (0 <= i < |vals(l, null)|) ==> vals(l, null)[i] == old(vals(l, null)[i]) + 1
   {
      var curr: Ref := l
      unfold ListSeg(l, null)
      fold ListSeg(l, curr)  // empty segment to establish loop invariant

      var idx : Int := 0

      while(curr.next != null)
         invariant ListSeg(l, curr)
         invariant acc(curr.next) && acc(curr.val) && ListSeg(curr.next, null) 
         
         invariant forall i : Int :: (0 <= i < idx) ==> vals(l, curr)[i] == old(vals(l, null)[i]) + 1

         invariant vals(curr.next, null) == old(vals(l, null))[idx + 1..]
         invariant curr.val == old(vals(l, null)[idx])

         invariant |vals(l, curr)| + |vals(curr.next, null)|+ 1 ==  |old(vals(l, null))|  
         invariant idx == |vals(l, curr)|
         

        
      {
         
         var tmp: Ref; tmp := curr.next // read here, before permission is folded
         curr.val := curr.val + 1
         assert(unfolding ListSeg(curr.next, null) in curr != curr.next)
         addAtEnd(l, curr, curr.next) // extend predicate
         curr := tmp
         
         unfold ListSeg(curr, null)

         idx := idx + 1
      }
      // Deal with last value
      curr.val := curr.val + 1

      // Extend predicate one last time also for the last value
      addAtEnd(l, curr, null)
   
} */


// ensures result == sum_i{i= 1} ^100

/* method add_iterative_spec(l : Ref)
   requires List(l)
   ensures List(l)
   ensures |values(l)| == |old(values(l))| 
   ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
   //OLD LABEL

   var curr : Ref
   curr := l 

   var idx : Int
   idx := 0

  
   loop_spec
      Pre: List(curr)
      Post(curr): List(pre(curr)) 
      && |values(pre(curr))| == |pre(values(pre(curr)))| 
      && forall i : Int :: 
      (0 <= i < |values(pre(curr))|) ==> values(pre(curr))[i] == pre(values(pre(curr))[i]) + 1
   while(curr.next != null)
   {
      // PRE LABEL : start of iteration i

      unfold List(curr)
      curr.val := curr.val + 1
      curr := curr.next

      idx := idx + 1

      // PRE_NEXT LABEL : end of iteration i
   }
}   */

// TODO
// 1. new Syntax to talk about old variables in postcondition vs current vars after execution of loop
// pre-iteration pre(.) on vars/heap: refers to state at beginning of loop (encode with labelled old)

method havoc_ref() returns (x: Ref)
method havoc_int() returns (x: Int)


// This should be desugared into:
method add_iterative_spec(l : Ref)
   requires List(l)
   ensures List(l)
   ensures |values(l)| == |old(values(l))| 
   ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
   var curr : Ref
   curr := l

   label pre_loop
   var curr_pre_loop : Ref := curr


   /* BEGINNING OF ENCODING OF WHILE LOOP SPEC */
   // -----------------------------------------------------------------------------------------------------------------------

   exhale List(curr) // 1. Assert precondition even holds before execution of while loop (we don't inhale this as we already have it; double perms is a problem)
   
   curr := havoc_ref()


   //2. Havoc all loop targets i.e. curr, idx
   // Right now I'm renaming vars
   var non_det : Bool
   if(non_det){

      
   
      //var wl : Bool := true
      while(true){
         if(curr != null){ // 2. If curr is non-null we prove the inductive case
            // in general more perms left
            //EXHALE ALL PERMS
            // Is this equivalent to slide 36, inhaling before the if??
            // TODO: 
            // 1. Find which perms are available before this if clause
            // 2. Exhale all of them
            inhale List(curr)

            // CHECKPOINT AT BEGINNING OF ITERATION
            label pre
            var curr_copy : Ref
            curr_copy := curr


            /* START OF WHILE LOOP BODY */

            unfold List(curr) // this turns the predicate into acc(curr.val) && acc(curr.next) && List(curr.next)

            curr.val := curr.val + 1
            curr := curr.next

            /* END OF WHILE LOOP BODY */


            // CHECKPOINT AT END OF ITERATION
            label pre_next
            var curr_copy_next : Ref
            curr_copy_next := curr

            exhale List(curr) // Exhale precondition of next node. This is analogous to a recursive call's precond.
            // Here we should lose List(old(curr).next) the one from before but we should retain the val and next ptr.

            // HAVOC AGAIN (so that the postcondition proof obligation is done for any value of curr and idx)

            curr := havoc_ref()
            
            // Inhale(Post(curr))
            inhale List(curr_copy_next)
            
            /*Post(curr): List(pre(curr)) 
            && |values(pre(curr))| == |pre(values(pre(curr)))| 
            && forall i : Int :: 
            (0 <= i < |values(pre(curr))|) ==> values(pre(curr))[i] == pre(values(pre(curr))[i]) + 1 */
      
            inhale |values(curr_copy_next)| == |old[pre_next](values(curr_copy_next))|
            inhale forall i : Int :: 
            (0 <= i < |values(curr_copy_next)|) ==>  values(curr_copy_next)[i] ==  old[pre_next](values(curr_copy_next)[i]) + 1

            //curr := curr_copy_next

            // Ghost code that the user provides to prove initial postcondition in recursive method. 
            fold List(curr_copy)

            // All in one conj.
            exhale List(curr_copy) 
            && |values(curr_copy)| == |old[pre](values(curr_copy))|
            && forall i : Int :: 
            (0 <= i < |values(curr_copy)|) ==>  values(curr_copy)[i] ==  old[pre](values(curr_copy)[i]) + 1


            //assume false // If all holds before then the inductive step is proven!
         }else{ // curr is null so holds vacuously. i.e. no incrementing to do.


            //pre 
            


            //copy

            //base case 

            fold List(curr_pre_base)

            /*Post(curr): List(pre(curr)) 
            && |values(pre(curr))| == |pre(values(pre(curr)))| 
            && forall i : Int :: 
            (0 <= i < |values(pre(curr))|) ==> values(pre(curr))[i] == pre(values(pre(curr))[i]) + 1 */

            exhale  List(curr_pre_base) 
            && |values(curr_pre_base)| == |old[pre_base](values(curr_pre_base))|
            && forall i : Int :: {values(curr_pre_base)[i]}
            (0 <= i < |values(curr_pre_base)|) ==>  values(curr_pre_base)[i] ==  old[pre_base](values(curr_pre_base)[i]) + 1


            //assume false

         }

          //wl := false ???
      }
     
      

   }else{


      inhale  List(curr_pre_loop) 
         && |values(curr_pre_loop)| == |old[pre_loop](values(curr_pre_loop))|
         && forall i : Int :: 
         (0 <= i < |values(curr_pre_loop)|) ==>  values(curr_pre_loop)[i] ==  old[pre_loop](values(curr_pre_loop)[i]) + 1

   }
   


   // -----------------------------------------------------------------------------------------------------------------------
   /* END OF ENCODING OF WHILE LOOP SPEC */

}


/* while(l != null){
   inhale Pre(l)

   Body

   exhale Pre(l) // This now refers to l.next

   inhale Post(l)

   Ghost Code // This helps to prove the postcondition below

   exhale Post(old(curr)) // This refers to curr and not curr.next 
} 

while(l != null){
   inhale Pre(l)

   Body

   exhale Pre(l) // This now refers to l.next

   inhale Post(l)

   Ghost Code // This helps to prove the postcondition below

   exhale Post(old(curr)) // This refers to curr and not curr.next 
} 
Base Case Code

Ghost Code

exhale Post(l)



inhale Pre(l)
while(l != null){
   Body

   Ghost Code 

} 
Base Case Code

Ghost Code

exhale Post(l) */


//invariant unfolding List(curr) in |values(l)| == |old(values(l))| // The length remains unchanged
      //invariant forall i: Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l))[i] + 1
      //

/* method length(l : Ref) returns (ret : Int)
   requires List(l)
   ensures List(l)
 {
   if (l == null) {
      ret := 0
   } else {
      unfold List(l)
      ret := length(l.next)
      ret := ret + 1
      fold List(l)
   }
} */




/* method length_iterative(l : Ref) returns (ret : Int)
   requires List(l)
   ensures List(l)
 {
   var newl : Ref
   ret := 0
   newl := l
   while (newl != null)
     invariant List(newl)
     invariant ListSeg(l, newl)
     //requires List(newl)
     //ensures List(l)
   {
      unfold List(newl)
      ret := ret + 1
      newl := newl.next
      //fold List(newl)
   }
}  */

// x -> y -> z
//      ^ 
//      newl
// ^ 
// l