field val : Int
field next : Ref

predicate List(l : Ref) {
   (l != null) ==> acc(l.val) && acc(l.next) && List(l.next)
}


function values(l: Ref): Seq[Int]
    requires List(l)
{
    unfolding List(l) in 
    l == null
        ? Seq()
        : Seq(l.val) ++ values(l.next)
}

function length(l : Ref): Int
    requires List(l)
    {
        unfolding List(l)
        in l == null ? 0 : 1 + length(l.next)
    }


method len_recursive_(l : Ref, accu : Int) returns (len : Int)
  requires List(l)
  ensures List(l) 
  //ensures |values(l)| == |old(values(l))| 
  ensures accu + old(length(l)) == len 
   {
  unfold List(l)
  if(l != null){
    // Prove Pre(l.next)
   
    len := len_recursive_(l.next, accu + 1)

    // Assume Post(l.next) 
  }else{
    len := accu
  }
  fold List(l)
}


method len_recursive(l : Ref) returns (len : Int)
  requires List(l)
  ensures List(l) 
  //ensures |values(l)| == |old(values(l))| 
  ensures len == length(l)
   {
  unfold List(l)
  if(l != null){
    // Prove Pre(l.next)
   
    len := len_recursive(l.next)
    len := len + 1

    // Assume Post(l.next) 
  }else{
    len := 0
  }
  fold List(l)
}

/* method add_recursive(l : Ref)
  requires precondition
  ensures postcondition
   {
  if(l != null){
    Body
    Recursive Call
  }else{
    Base Case Code
  }
  Ghost Code
} */



/* method addAtEnd(this: Ref, n: Ref, nn: Ref)
   requires ListSeg(this, n) &&  acc(ListSeg(nn, null), 1/2) && n != nn
   requires acc(n.next) && acc(n.val) && n.next == nn
   ensures ListSeg(this, nn) && acc(ListSeg(nn, null), 1/2)
   ensures vals(this, nn) ==  old(vals(this, n)) ++  Seq(old(n.val))
   {
      if(this == n) {
         fold ListSeg(nn, nn)  // empty segment
         fold ListSeg(this, nn)
      } else {
         unfold ListSeg(this, n)
         assert(unfolding acc(ListSeg(nn, null), 1/2) in nn != this)
         addAtEnd(this.next, n, nn)
         fold ListSeg(this, nn)
      }
   }

method add_iterative(l : Ref)
   requires l!= null && ListSeg(l, null)
   ensures ListSeg(l, null)
   ensures |vals(l, null)| == |old(vals(l, null))| 
   ensures forall i : Int :: (0 <= i < |vals(l, null)|) ==> vals(l, null)[i] == old(vals(l, null)[i]) + 1
   {
      var curr: Ref := l
      unfold ListSeg(l, null)
      fold ListSeg(l, curr)  // empty segment to establish loop invariant

      var idx : Int := 0

      while(curr.next != null)
         invariant ListSeg(l, curr)
         invariant acc(curr.next) && acc(curr.val) && ListSeg(curr.next, null) 
         
         invariant forall i : Int :: (0 <= i < idx) ==> vals(l, curr)[i] == old(vals(l, null)[i]) + 1

         invariant vals(curr.next, null) == old(vals(l, null))[idx + 1..]
         invariant curr.val == old(vals(l, null)[idx])

         invariant |vals(l, curr)| + |vals(curr.next, null)|+ 1 ==  |old(vals(l, null))|  
         invariant idx == |vals(l, curr)|
         

        
      {
         
         var tmp: Ref; tmp := curr.next // read here, before permission is folded
         curr.val := curr.val + 1
         assert(unfolding ListSeg(curr.next, null) in curr != curr.next)
         addAtEnd(l, curr, curr.next) // extend predicate
         curr := tmp
         
         unfold ListSeg(curr, null)

         idx := idx + 1
      }
      // Deal with last value
      curr.val := curr.val + 1

      // Extend predicate one last time also for the last value
      addAtEnd(l, curr, null)
   
} */

/* method add_iterative_spec(l : Ref)
   requires List(l)
   ensures List(l)
   ensures |values(l)| == |old(values(l))| 
   ensures forall i : Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   {
   var curr : Ref
   curr := l

   var idx : Int
   idx := 0

   loop_spec
      pre: List(curr)
      post: List(curr) && forall i : Int :: (idx <= i < |values(l)|) ==> values(l)[i] == old(values(l)[i]) + 1
   while(curr.next != null)
   {
      unfold List(curr)
      curr.val := curr.val + 1
      curr := curr.next

      idx := idx + 1
   }
}   */


method havoc_ref() returns (x: Ref)
method havoc_int() returns (x: Int)


// This should be desugared into:
method len_iterative_spec(l : Ref) returns (len : Int)
   requires List(l)
   ensures List(l)
   ensures old(length(l)) == len 
   //ensures len == length(l)
   {
   var curr : Ref := l
   var accu : Int := 0
   //len := 0

   label pre_loop
   var curr_pre_loop : Ref := curr
   var accu_pre_loop : Int := accu

   //loop_spec
      //pre: List(curr)
      //post: List(pre(curr)) 
     // && pre(accu) + pre(length(pre(curr))) == len 
   //while(curr != null)
   //{
   exhale List(curr) // 1. Assert method precondition implies loop_spec precondition even before execution of while loop (we don't inhale this as we already have it; double perms would be a problem)
   
  

   curr := havoc_ref()
   accu := havoc_int()

   var non_det : Bool
   if(non_det){

      while(true){
            if(curr != null){ // 2. If curr is non-null we prove the inductive case
         // exhale all perms

            inhale List(curr)

            label pre
            var accu_copy : Int := accu
            var curr_copy : Ref := curr

            unfold List(curr)
            //change this and try for accu
            accu := accu + 1
            curr := curr.next
            //idx := idx + 1 // TODO: generalize this IDX??

            label pre_next
            var accu_copy_next : Int := accu
            var curr_copy_next : Ref := curr

            exhale List(curr) // Exhale precondition of next node. This is analogous to a recursive call's precond.
         
            curr := havoc_ref()
            accu := havoc_int()

            // inhale |values(curr_copy_next)| == |old[pre_next](values(curr_copy_next))|
            // Inhale(Post(l))
            inhale List(curr_copy_next)
            &&  accu_copy_next + old[pre_next](length(curr_copy_next)) == len

            fold List(curr_copy) // fold LIst(pre(curr))

            
            // Exhale(Post(old(l)))
            exhale List(curr_copy)
            &&  accu_copy + old[pre](length(curr_copy)) == len


            //fold List(l) // perms to l.next??
            //assert List(curr)
            assume false
         }else{  // Base Case

            inhale List(curr)

            label pre_base
            var accu_copy_base : Int := accu

            len := accu

            fold List(curr)

            exhale List(curr)
            && accu_copy_base + old[pre_base](length(curr)) == len

            assume false
         }
      }
      
   }else{
      inhale List(curr_pre_loop)
         && accu_pre_loop + old[pre_loop](length(curr_pre_loop)) == len
   }

   
   
   
   }


method len_iterative(l : Ref) returns (len : Int)
   requires List(l){
      var curr : Ref := l

      var accu : Int := 0

      while(curr != null)
         invariant List(curr){
         unfold List(curr)
         curr := curr.next
         accu := accu + 1
      }

      len := accu
   }


/* while(l != null){
   inhale Pre(l)

   Body

   exhale Pre(l) // This now refers to l.next

   inhale Post(l)

   Ghost Code // This helps to prove the postcondition below

   exhale Post(old(curr)) // This refers to curr and not curr.next 
} 

while(l != null){
   inhale Pre(l)

   Body

   exhale Pre(l) // This now refers to l.next

   inhale Post(l)

   Ghost Code // This helps to prove the postcondition below

   exhale Post(old(curr)) // This refers to curr and not curr.next 
} 
Base Case Code

Ghost Code

exhale Post(l)



inhale Pre(l)
while(l != null){
   Body

   Ghost Code 

} 
Base Case Code

Ghost Code

exhale Post(l) */


//invariant unfolding List(curr) in |values(l)| == |old(values(l))| // The length remains unchanged
      //invariant forall i: Int :: (0 <= i < |values(l)|) ==> values(l)[i] == old(values(l))[i] + 1
      //

/* method length(l : Ref) returns (ret : Int)
   requires List(l)
   ensures List(l)
 {
   if (l == null) {
      ret := 0
   } else {
      unfold List(l)
      ret := length(l.next)
      ret := ret + 1
      fold List(l)
   }
} */




/* method length_iterative(l : Ref) returns (ret : Int)
   requires List(l)
   ensures List(l)
 {
   var newl : Ref
   ret := 0
   newl := l
   while (newl != null)
     invariant List(newl)
     invariant ListSeg(l, newl)
     //requires List(newl)
     //ensures List(l)
   {
      unfold List(newl)
      ret := ret + 1
      newl := newl.next
      //fold List(newl)
   }
}  */

// x -> y -> z
//      ^ 
//      newl
// ^ 
// l